// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel CSPassData
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
RWTexture2D<float4> Displacement;
RWTexture2D<float4> Normal;
RWStructuredBuffer<float4> DataBuffer;
RWStructuredBuffer<float4> LastDataBuffer;
RWStructuredBuffer<float> TimeBuffer;
RWStructuredBuffer<float> LastTimeBuffer;
float Width;
float Height;
float4 ColorSnow;
float4 ColorTrail;
float4 MoveVector;
float2 FaceDirection;
float Fade;
float TrailSize;
float TrailTime;
float2 Unit;
int DisWidth;
int DisHeight;

float LengthAbs(float2 x,float2 y){
    
    float2 dif=x-y;
    return sqrt(dot(dif,dif));
}
float rand(float3 x){
                return frac(sin(dot(x.xyz,float3(12.9898,78.233,53.539)))*43758.5453);
            }
[numthreads(16,16,2)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    
    //get last data and pass it
    int index1=clamp(id.y*Width-(int)MoveVector.y*Width+id.x-(int)MoveVector.x,0,Width*Height-1);
    int index2=id.y*Width+id.x;
    // x,y for direction, z for time ,w for xPos
    DataBuffer[index2]=LastDataBuffer[index1];
    TimeBuffer[index2]=LastTimeBuffer[index1];
    TimeBuffer[index2]=max(0,TimeBuffer[index2]-Fade/100);
    float time=pow(min(TrailTime,TimeBuffer[index2])/TrailTime,5);
    float nowheight=lerp(0,DataBuffer[index2].w,time);
    float3 nownormal=lerp(float3(0,1,0),DataBuffer[index2].xyz,time);
    //figure out direction and distance
    float2 center=float2(Width/2,Height/2);
    float dis=LengthAbs(id.xy,center);

    //update the new print
    if(dis<TrailSize){
        float2 uv=(id.xy-center)/TrailSize;
        float2 bd=normalize(FaceDirection);
        float2x2 rot=float2x2(0,1,-1,0);
        float2 ac=mul(rot,bd);
        float dv=ac.x*bd.y-bd.x*ac.y;
        float2x2 mtx=float2x2(bd.y/dv,-ac.y/dv,-bd.x/dv,ac.x/dv);
        uv=mul(mtx,uv);

        uv=(uv*0.5+0.5);


        float4 sampDis=Displacement[uv*float2(DisWidth,DisHeight)];
        //float3 sampNormal=-Normal[uv*float2(DisWidth,DisHeight)].xyz;
       // sampNormal.y*=-1;
       float3 sampNormal=Normal[uv*float2(DisWidth,DisHeight)].xyz;
        float h=sampDis.x-1+sampDis.y*0.1;
        float height=min(h,nowheight);
        sampNormal+=0.1*rand(sampNormal);
        if(h<nowheight||h>=0&&nowheight>=0){
            height=h;
           nownormal=sampNormal;
        }
        if(sampDis.x<0.01&&sampDis.z==1)
            nownormal=sampNormal;
        TimeBuffer[index2]=1;
        nowheight=height;
        
    }
    DataBuffer[index2].w=nowheight;
    DataBuffer[index2].xyz=nownormal;
    //update Result
    Result[id.xy]=float4(DataBuffer[index2].xyz, nowheight*0.5+0.5);
   // Result[id.xy]=Displacement[id.xy/float2(Width,Height)*float2(DisWidth,DisHeight)];
   // Result[id.xy]=float4(UV,0,1);
}

[numthreads(16,32,2)]
void CSPassData (uint3 id : SV_DispatchThreadID)
{
    int index=id.y*Width+id.x;
    LastDataBuffer[index]=DataBuffer[index];
    LastTimeBuffer[index]=TimeBuffer[index];
} 
